type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | XOR
  | OR
  | AND
  | SLL
  | SRL
  | SQRT
  | FABS
  | MINUS
  | PLUS
  | AST
  | SLASH
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | FTOI
  | ITOF
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | INPUT
  | OUTPUT
  | ITOIA
  | ITOFA
  | GETHP
  | SETHP
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parser�����Ѥ����ѿ����ؿ������ʤɤ���� *)
open Syntax
let addtyp x = (x, Type.gentyp ())
# 58 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* XOR *);
  262 (* OR *);
  263 (* AND *);
  264 (* SLL *);
  265 (* SRL *);
  266 (* SQRT *);
  267 (* FABS *);
  268 (* MINUS *);
  269 (* PLUS *);
  270 (* AST *);
  271 (* SLASH *);
  272 (* MINUS_DOT *);
  273 (* PLUS_DOT *);
  274 (* AST_DOT *);
  275 (* SLASH_DOT *);
  276 (* FTOI *);
  277 (* ITOF *);
  278 (* EQUAL *);
  279 (* LESS_GREATER *);
  280 (* LESS_EQUAL *);
  281 (* GREATER_EQUAL *);
  282 (* LESS *);
  283 (* GREATER *);
  284 (* IF *);
  285 (* THEN *);
  286 (* ELSE *);
  288 (* LET *);
  289 (* IN *);
  290 (* REC *);
  291 (* INPUT *);
  292 (* OUTPUT *);
  293 (* ITOIA *);
  294 (* ITOFA *);
  295 (* GETHP *);
  296 (* SETHP *);
  297 (* COMMA *);
  298 (* ARRAY_CREATE *);
  299 (* DOT *);
  300 (* LESS_MINUS *);
  301 (* SEMICOLON *);
  302 (* LPAREN *);
  303 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  287 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\007\000\007\000\004\000\004\000\005\000\
\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\006\000\002\000\003\000\003\000\003\000\003\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\006\000\005\000\002\000\001\000\008\000\007\000\003\000\
\003\000\001\000\004\000\002\000\001\000\002\000\001\000\003\000\
\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\050\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\010\000\027\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\015\000\017\000\016\000\018\000\019\000\000\000\000\000\
\013\000\014\000\000\000\000\000\030\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\000\000\059\000\058\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\025\000\026\000\077\000\071\000\027\000\079\000\110\000"

let yysindex = "\006\000\
\190\255\000\000\000\000\000\000\000\000\000\000\190\255\190\255\
\190\255\190\255\190\255\070\255\070\255\190\255\000\000\230\254\
\070\255\070\255\070\255\070\255\070\255\070\255\070\255\140\255\
\226\004\001\255\229\254\000\000\226\004\226\004\000\000\000\000\
\228\254\228\254\062\004\251\254\243\254\244\254\228\254\228\254\
\228\254\228\254\228\254\228\254\127\255\000\000\189\003\190\255\
\190\255\190\255\190\255\190\255\190\255\190\255\190\255\190\255\
\190\255\190\255\190\255\190\255\190\255\190\255\190\255\190\255\
\190\255\190\255\190\255\190\255\231\254\228\254\070\255\190\255\
\232\254\190\255\190\255\248\254\247\254\240\254\215\254\228\254\
\000\000\000\000\000\000\000\000\000\000\000\000\232\255\232\255\
\000\000\000\000\232\255\232\255\000\000\000\000\022\255\022\255\
\022\255\022\255\022\255\022\255\041\005\226\004\190\255\228\254\
\041\005\190\255\103\004\144\004\248\254\011\255\190\255\012\255\
\014\255\020\255\232\003\019\004\190\255\190\255\000\000\190\255\
\226\004\000\000\000\000\190\255\002\255\000\000\011\005\226\004\
\226\004\185\004\190\255\190\255\011\005\226\004"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\138\000\115\002\000\000\102\000\145\000\000\000\000\000\
\181\000\224\000\000\000\000\000\000\000\000\000\011\001\058\001\
\105\001\148\001\191\001\234\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\021\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\002\
\000\000\000\000\000\000\000\000\000\000\000\000\141\002\168\002\
\000\000\000\000\194\002\230\002\000\000\000\000\006\003\032\003\
\058\003\071\003\099\003\112\003\235\002\188\000\000\000\095\000\
\119\003\000\000\000\000\000\000\053\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\231\000\000\000\000\000\000\000\001\000\000\000\125\003\031\002\
\047\255\000\000\000\000\000\000\146\003\126\002"

let yygindex = "\000\000\
\002\000\066\000\000\000\000\000\000\000\000\000\228\255"

let yytablesize = 1604
let yytable = "\113\000\
\007\000\004\000\005\000\006\000\036\000\114\000\001\000\037\000\
\028\000\029\000\030\000\031\000\032\000\072\000\073\000\035\000\
\075\000\076\000\078\000\038\000\103\000\106\000\109\000\111\000\
\112\000\047\000\048\000\049\000\050\000\051\000\052\000\015\000\
\120\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\124\000\122\000\069\000\123\000\131\000\024\000\055\000\
\060\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\004\000\005\000\
\006\000\105\000\053\000\107\000\108\000\033\000\034\000\051\000\
\119\000\000\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\000\000\000\000\070\000\000\000\000\000\054\000\000\000\
\000\000\000\000\000\000\000\000\015\000\032\000\000\000\000\000\
\115\000\000\000\000\000\116\000\000\000\000\000\080\000\000\000\
\121\000\000\000\000\000\024\000\000\000\000\000\127\000\128\000\
\000\000\129\000\000\000\000\000\000\000\130\000\000\000\004\000\
\005\000\006\000\000\000\000\000\133\000\134\000\000\000\000\000\
\104\000\008\000\000\000\003\000\004\000\005\000\006\000\007\000\
\033\000\000\000\000\000\000\000\000\000\008\000\009\000\010\000\
\000\000\000\000\000\000\011\000\000\000\015\000\000\000\012\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\000\000\073\000\015\000\016\000\024\000\000\000\017\000\018\000\
\019\000\020\000\021\000\022\000\034\000\023\000\000\000\000\000\
\000\000\024\000\046\000\048\000\000\000\003\000\004\000\005\000\
\006\000\007\000\000\000\000\000\000\000\000\000\000\000\008\000\
\009\000\010\000\000\000\000\000\000\000\011\000\000\000\000\000\
\000\000\012\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\015\000\016\000\000\000\035\000\
\017\000\018\000\019\000\020\000\021\000\022\000\043\000\023\000\
\000\000\000\000\000\000\024\000\048\000\049\000\050\000\051\000\
\052\000\000\000\000\000\000\000\000\000\055\000\056\000\000\000\
\000\000\059\000\060\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\036\000\000\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\000\000\000\000\007\000\007\000\
\007\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\007\000\000\000\007\000\007\000\007\000\
\055\000\055\000\055\000\000\000\055\000\055\000\055\000\055\000\
\055\000\037\000\000\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\000\000\000\000\055\000\055\000\055\000\
\055\000\055\000\055\000\000\000\055\000\055\000\055\000\000\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\000\000\000\000\000\000\055\000\055\000\055\000\054\000\
\054\000\054\000\000\000\054\000\054\000\054\000\054\000\054\000\
\038\000\000\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\000\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\054\000\054\000\054\000\000\000\054\000\
\000\000\000\000\032\000\032\000\000\000\000\000\032\000\054\000\
\000\000\000\000\000\000\054\000\054\000\054\000\008\000\008\000\
\008\000\008\000\008\000\039\000\032\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000\000\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000\008\000\008\000\
\000\000\000\000\008\000\000\000\000\000\033\000\033\000\000\000\
\000\000\033\000\008\000\000\000\000\000\000\000\008\000\000\000\
\008\000\034\000\034\000\034\000\034\000\034\000\040\000\033\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\000\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
\000\000\034\000\034\000\000\000\000\000\034\000\000\000\000\000\
\048\000\048\000\000\000\000\000\048\000\034\000\000\000\000\000\
\000\000\034\000\000\000\034\000\035\000\035\000\035\000\035\000\
\035\000\041\000\048\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\000\000\000\000\035\000\035\000\035\000\
\035\000\035\000\035\000\000\000\035\000\035\000\000\000\000\000\
\035\000\000\000\000\000\043\000\043\000\000\000\000\000\043\000\
\035\000\000\000\000\000\000\000\035\000\000\000\035\000\036\000\
\036\000\036\000\036\000\036\000\044\000\043\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\042\000\000\000\
\036\000\036\000\036\000\036\000\036\000\036\000\000\000\036\000\
\036\000\000\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\000\000\000\000\000\000\036\000\
\000\000\036\000\000\000\000\000\000\000\000\000\037\000\037\000\
\037\000\037\000\037\000\049\000\000\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\000\000\000\000\037\000\
\037\000\037\000\037\000\037\000\037\000\000\000\037\000\037\000\
\000\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\000\000\000\000\037\000\000\000\
\037\000\000\000\000\000\000\000\000\000\038\000\038\000\038\000\
\038\000\038\000\045\000\000\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\046\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\038\000\038\000\000\000\
\000\000\038\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\038\000\000\000\000\000\000\000\038\000\000\000\038\000\
\039\000\039\000\039\000\039\000\039\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\011\000\
\000\000\039\000\039\000\039\000\039\000\039\000\039\000\000\000\
\039\000\039\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\000\000\000\000\
\039\000\029\000\039\000\040\000\040\000\040\000\040\000\040\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\000\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\000\000\040\000\040\000\000\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\028\000\000\000\040\000\
\000\000\000\000\057\000\040\000\000\000\040\000\041\000\041\000\
\041\000\041\000\041\000\000\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\000\000\000\000\041\000\
\041\000\041\000\041\000\041\000\041\000\020\000\041\000\041\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\041\000\000\000\
\041\000\044\000\044\000\044\000\044\000\044\000\000\000\021\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
\000\000\044\000\044\000\000\000\000\000\044\000\000\000\000\000\
\000\000\024\000\000\000\042\000\042\000\044\000\000\000\042\000\
\000\000\044\000\000\000\044\000\000\000\000\000\025\000\000\000\
\049\000\049\000\049\000\049\000\049\000\042\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\000\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\049\000\049\000\022\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\000\000\000\000\023\000\
\049\000\000\000\049\000\000\000\000\000\000\000\056\000\045\000\
\045\000\045\000\045\000\045\000\026\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\000\000\000\000\
\045\000\045\000\045\000\045\000\045\000\045\000\000\000\045\000\
\045\000\047\000\000\000\045\000\000\000\000\000\000\000\000\000\
\012\000\012\000\046\000\046\000\012\000\012\000\046\000\045\000\
\000\000\045\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\012\000\012\000\000\000\046\000\012\000\000\000\000\000\
\000\000\000\000\000\000\011\000\011\000\012\000\000\000\011\000\
\011\000\012\000\000\000\012\000\000\000\011\000\011\000\011\000\
\011\000\011\000\011\000\000\000\011\000\011\000\000\000\000\000\
\011\000\000\000\000\000\000\000\000\000\029\000\029\000\000\000\
\011\000\029\000\029\000\000\000\011\000\000\000\011\000\029\000\
\029\000\029\000\029\000\029\000\029\000\000\000\029\000\029\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\000\000\000\000\000\000\029\000\000\000\
\029\000\028\000\028\000\000\000\000\000\028\000\028\000\000\000\
\000\000\000\000\000\000\028\000\028\000\028\000\028\000\028\000\
\028\000\000\000\028\000\028\000\000\000\000\000\028\000\057\000\
\057\000\000\000\000\000\057\000\000\000\000\000\028\000\000\000\
\000\000\000\000\028\000\057\000\028\000\000\000\000\000\057\000\
\000\000\057\000\000\000\020\000\020\000\020\000\020\000\020\000\
\020\000\000\000\020\000\020\000\000\000\000\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\
\000\000\000\000\020\000\000\000\020\000\021\000\021\000\021\000\
\021\000\021\000\021\000\000\000\021\000\021\000\000\000\000\000\
\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\000\000\000\000\000\000\021\000\000\000\021\000\024\000\
\024\000\024\000\024\000\024\000\024\000\000\000\024\000\024\000\
\000\000\000\000\024\000\000\000\025\000\025\000\025\000\025\000\
\025\000\025\000\024\000\025\000\025\000\000\000\024\000\025\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\000\000\000\000\025\000\000\000\025\000\000\000\000\000\
\022\000\022\000\022\000\022\000\022\000\022\000\000\000\022\000\
\022\000\000\000\000\000\022\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\022\000\023\000\023\000\000\000\022\000\
\023\000\022\000\000\000\056\000\056\000\000\000\000\000\056\000\
\023\000\026\000\026\000\000\000\023\000\026\000\023\000\056\000\
\000\000\000\000\000\000\056\000\000\000\056\000\000\000\000\000\
\000\000\026\000\000\000\026\000\000\000\000\000\047\000\047\000\
\000\000\000\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\000\000\
\047\000\048\000\049\000\050\000\051\000\052\000\000\000\000\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\000\000\000\000\061\000\062\000\063\000\064\000\065\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\067\000\000\000\000\000\
\000\000\068\000\000\000\081\000\048\000\049\000\050\000\051\000\
\052\000\000\000\000\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\000\000\000\000\061\000\062\000\063\000\
\064\000\065\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\000\000\000\000\000\000\068\000\000\000\125\000\048\000\
\049\000\050\000\051\000\052\000\000\000\000\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\000\000\000\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\000\000\000\000\000\000\068\000\
\000\000\126\000\048\000\049\000\050\000\051\000\052\000\000\000\
\000\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\000\000\000\000\061\000\062\000\063\000\064\000\065\000\
\066\000\000\000\074\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\000\000\000\
\000\000\000\000\068\000\048\000\049\000\050\000\051\000\052\000\
\000\000\000\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\000\000\000\000\061\000\062\000\063\000\064\000\
\065\000\066\000\000\000\000\000\117\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\000\000\000\000\000\000\068\000\048\000\049\000\050\000\051\000\
\052\000\000\000\000\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\000\000\000\000\061\000\062\000\063\000\
\064\000\065\000\066\000\000\000\000\000\000\000\000\000\000\000\
\118\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\000\000\000\000\000\000\068\000\048\000\049\000\050\000\
\051\000\052\000\000\000\000\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\000\000\000\000\061\000\062\000\
\063\000\064\000\065\000\066\000\000\000\000\000\000\000\000\000\
\000\000\132\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\000\000\000\000\000\000\068\000\048\000\049\000\
\050\000\051\000\052\000\000\000\000\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\000\000\000\000\061\000\
\062\000\063\000\064\000\065\000\066\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\000\000\000\000\000\000\068\000\048\000\
\049\000\050\000\051\000\052\000\000\000\000\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\000\000\000\000\
\061\000\062\000\063\000\064\000\065\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\049\000\050\000\
\051\000\052\000\000\000\067\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\000\000\000\000\061\000\062\000\
\063\000\064\000\065\000\066\000"

let yycheck = "\041\001\
\000\000\001\001\002\001\003\001\031\001\047\001\001\000\034\001\
\007\000\008\000\009\000\010\000\011\000\041\001\043\001\014\000\
\022\001\031\001\031\001\046\001\046\001\046\001\031\001\033\001\
\041\001\024\000\005\001\006\001\007\001\008\001\009\001\031\001\
\022\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\022\001\031\001\043\001\031\001\044\001\046\001\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\001\001\002\001\
\003\001\072\000\022\001\074\000\075\000\012\000\013\000\033\001\
\109\000\255\255\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\255\255\255\255\026\000\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\031\001\000\000\255\255\255\255\
\103\000\255\255\255\255\106\000\255\255\255\255\045\000\255\255\
\111\000\255\255\255\255\046\001\255\255\255\255\117\000\118\000\
\255\255\120\000\255\255\255\255\255\255\124\000\255\255\001\001\
\002\001\003\001\255\255\255\255\131\000\132\000\255\255\255\255\
\071\000\000\000\255\255\000\001\001\001\002\001\003\001\004\001\
\000\000\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\255\255\255\255\255\255\016\001\255\255\031\001\255\255\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\255\255\043\001\031\001\032\001\046\001\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\000\000\042\001\255\255\255\255\
\255\255\046\001\047\001\000\000\255\255\000\001\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\255\255\255\255\255\255\016\001\255\255\255\255\
\255\255\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\255\255\255\255\031\001\032\001\255\255\000\000\
\035\001\036\001\037\001\038\001\039\001\040\001\000\000\042\001\
\255\255\255\255\255\255\046\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\255\255\014\001\015\001\255\255\
\255\255\018\001\019\001\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\000\000\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\031\001\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\041\001\255\255\043\001\255\255\045\001\046\001\047\001\
\001\001\002\001\003\001\255\255\005\001\006\001\007\001\008\001\
\009\001\000\000\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\029\001\030\001\031\001\255\255\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\041\001\255\255\255\255\255\255\045\001\046\001\047\001\001\001\
\002\001\003\001\255\255\005\001\006\001\007\001\008\001\009\001\
\000\000\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\029\001\030\001\031\001\255\255\033\001\
\255\255\255\255\029\001\030\001\255\255\255\255\033\001\041\001\
\255\255\255\255\255\255\045\001\046\001\047\001\005\001\006\001\
\007\001\008\001\009\001\000\000\047\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\029\001\030\001\255\255\
\255\255\033\001\041\001\255\255\255\255\255\255\045\001\255\255\
\047\001\005\001\006\001\007\001\008\001\009\001\000\000\047\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\255\255\
\029\001\030\001\255\255\255\255\033\001\041\001\255\255\255\255\
\255\255\045\001\255\255\047\001\005\001\006\001\007\001\008\001\
\009\001\000\000\047\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\029\001\030\001\255\255\255\255\
\033\001\255\255\255\255\029\001\030\001\255\255\255\255\033\001\
\041\001\255\255\255\255\255\255\045\001\255\255\047\001\005\001\
\006\001\007\001\008\001\009\001\000\000\047\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\000\000\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\029\001\
\030\001\255\255\255\255\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\041\001\255\255\255\255\255\255\045\001\
\255\255\047\001\255\255\255\255\255\255\255\255\005\001\006\001\
\007\001\008\001\009\001\000\000\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\041\001\255\255\255\255\255\255\045\001\255\255\
\047\001\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\000\000\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\000\000\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\255\255\
\255\255\033\001\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\041\001\255\255\255\255\255\255\045\001\255\255\047\001\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\000\000\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\029\001\030\001\255\255\255\255\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\041\001\255\255\255\255\255\255\
\045\001\000\000\047\001\005\001\006\001\007\001\008\001\009\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\029\001\030\001\255\255\255\255\033\001\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\041\001\
\255\255\255\255\000\000\045\001\255\255\047\001\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\000\000\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\041\001\255\255\255\255\255\255\045\001\255\255\
\047\001\005\001\006\001\007\001\008\001\009\001\255\255\000\000\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\255\255\
\255\255\000\000\255\255\029\001\030\001\041\001\255\255\033\001\
\255\255\045\001\255\255\047\001\255\255\255\255\000\000\255\255\
\005\001\006\001\007\001\008\001\009\001\047\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\029\001\030\001\000\000\255\255\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\041\001\255\255\255\255\000\000\
\045\001\255\255\047\001\255\255\255\255\255\255\000\000\005\001\
\006\001\007\001\008\001\009\001\000\000\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\029\001\
\030\001\000\000\255\255\033\001\255\255\255\255\255\255\255\255\
\012\001\013\001\029\001\030\001\016\001\017\001\033\001\045\001\
\255\255\047\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\047\001\033\001\255\255\255\255\
\255\255\255\255\255\255\012\001\013\001\041\001\255\255\016\001\
\017\001\045\001\255\255\047\001\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\029\001\030\001\255\255\255\255\
\033\001\255\255\255\255\255\255\255\255\012\001\013\001\255\255\
\041\001\016\001\017\001\255\255\045\001\255\255\047\001\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\041\001\255\255\255\255\255\255\045\001\255\255\
\047\001\012\001\013\001\255\255\255\255\016\001\017\001\255\255\
\255\255\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\029\001\030\001\255\255\255\255\033\001\029\001\
\030\001\255\255\255\255\033\001\255\255\255\255\041\001\255\255\
\255\255\255\255\045\001\041\001\047\001\255\255\255\255\045\001\
\255\255\047\001\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\029\001\030\001\255\255\255\255\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\041\001\255\255\
\255\255\255\255\045\001\255\255\047\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\029\001\030\001\255\255\255\255\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\041\001\255\255\255\255\255\255\045\001\255\255\047\001\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\041\001\029\001\030\001\255\255\045\001\033\001\
\047\001\255\255\255\255\255\255\255\255\255\255\255\255\041\001\
\255\255\255\255\255\255\045\001\255\255\047\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\029\001\
\030\001\255\255\255\255\033\001\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\041\001\029\001\030\001\255\255\045\001\
\033\001\047\001\255\255\029\001\030\001\255\255\255\255\033\001\
\041\001\029\001\030\001\255\255\045\001\033\001\047\001\041\001\
\255\255\255\255\255\255\045\001\255\255\047\001\255\255\255\255\
\255\255\045\001\255\255\047\001\255\255\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\045\001\255\255\
\047\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\041\001\255\255\255\255\
\255\255\045\001\255\255\047\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\041\001\255\255\255\255\255\255\045\001\255\255\047\001\005\001\
\006\001\007\001\008\001\009\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\041\001\255\255\255\255\255\255\045\001\
\255\255\047\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\041\001\255\255\
\255\255\255\255\045\001\005\001\006\001\007\001\008\001\009\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\041\001\
\255\255\255\255\255\255\045\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\041\001\255\255\255\255\255\255\045\001\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\041\001\255\255\255\255\255\255\045\001\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\041\001\255\255\255\255\255\255\045\001\005\001\
\006\001\007\001\008\001\009\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\041\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001"

let yynames_const = "\
  NOT\000\
  XOR\000\
  OR\000\
  AND\000\
  SLL\000\
  SRL\000\
  SQRT\000\
  FABS\000\
  MINUS\000\
  PLUS\000\
  AST\000\
  SLASH\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  FTOI\000\
  ITOF\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  INPUT\000\
  OUTPUT\000\
  ITOIA\000\
  ITOFA\000\
  GETHP\000\
  SETHP\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 80 "parser.mly"
    ( _2 )
# 664 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
    ( Unit )
# 670 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 84 "parser.mly"
    ( Bool(_1) )
# 677 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 86 "parser.mly"
    ( Int(_1) )
# 684 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 88 "parser.mly"
    ( Float(_1) )
# 691 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 90 "parser.mly"
    ( Var(_1, (Parsing.symbol_start_pos ()).pos_lnum) )
# 698 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 92 "parser.mly"
    ( Get(_1, _4, (Parsing.symbol_start_pos ()).pos_lnum) )
# 706 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 96 "parser.mly"
    ( _1 )
# 713 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 99 "parser.mly"
    ( Not(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 720 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    ( match _2 with
    | Float(f) -> Float(-.f) (* -1.23�ʤɤϷ����顼�ǤϤʤ��Τ��̰��� *)
    | e -> Neg(e, (Parsing.symbol_start_pos ()).pos_lnum) )
# 729 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 106 "parser.mly"
    ( Add(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 737 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 108 "parser.mly"
    ( Sub(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 745 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 110 "parser.mly"
    ( Mul(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 753 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
    ( Div(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 761 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( Xor(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 769 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
    ( And(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 777 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
    ( Or(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 785 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 120 "parser.mly"
    ( SLL(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 793 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 122 "parser.mly"
    ( SRL(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 801 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 124 "parser.mly"
    ( Eq(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 809 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
    ( Not(Eq(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) (* some float comparisons differ from OCaml for NaN; see: https://github.com/esumii/min-caml/issues/13#issuecomment-1147032750 *) )
# 817 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
    ( Not(LE(_3, _1, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) )
# 825 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
    ( Not(LE(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) )
# 833 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 132 "parser.mly"
    ( LE(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 841 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 134 "parser.mly"
    ( LE(_3, _1, (Parsing.symbol_start_pos ()).pos_lnum) )
# 849 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 137 "parser.mly"
    ( If(_2, _4, _6, (Parsing.symbol_start_pos ()).pos_lnum) )
# 858 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 140 "parser.mly"
    ( FNeg(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 865 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 142 "parser.mly"
    ( FAdd(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 873 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 144 "parser.mly"
    ( FSub(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 881 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 146 "parser.mly"
    ( FMul(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 889 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 148 "parser.mly"
    ( FDiv(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 897 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 150 "parser.mly"
    ( Sqrt(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 904 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 152 "parser.mly"
    ( FAbs(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 911 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 155 "parser.mly"
    ( FtoI(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 918 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 158 "parser.mly"
    ( ItoF(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 925 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 161 "parser.mly"
    ( In(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 932 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 164 "parser.mly"
    ( Out(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 939 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 167 "parser.mly"
    ( ItoIA(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 946 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 170 "parser.mly"
    ( ItoFA(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 953 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 173 "parser.mly"
    ( Gethp(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 960 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 176 "parser.mly"
    ( Sethp(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 967 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 179 "parser.mly"
    ( Let(addtyp _2, _4, _6, (Parsing.symbol_start_pos ()).pos_lnum) )
# 976 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 182 "parser.mly"
    ( LetRec(_3, _5, (Parsing.symbol_start_pos ()).pos_lnum) )
# 984 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 185 "parser.mly"
    ( App(_1, _2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 992 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 188 "parser.mly"
    ( Tuple(_1, (Parsing.symbol_start_pos ()).pos_lnum) )
# 999 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 190 "parser.mly"
    ( LetTuple(_3, _6, _8, (Parsing.symbol_start_pos ()).pos_lnum) )
# 1008 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 192 "parser.mly"
    ( Put(_1, _4, _7, (Parsing.symbol_start_pos ()).pos_lnum) )
# 1017 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 194 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 1025 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 197 "parser.mly"
    ( Array(_2, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 1033 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near line %d"
           (Parsing.symbol_start_pos ()).pos_lnum) )
# 1041 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 205 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 1050 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 209 "parser.mly"
    ( addtyp _1 :: _2 )
# 1058 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 211 "parser.mly"
    ( [addtyp _1] )
# 1065 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 216 "parser.mly"
    ( _1 @ [_2] )
# 1073 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 219 "parser.mly"
    ( [_1] )
# 1080 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 223 "parser.mly"
    ( _1 @ [_3] )
# 1088 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 225 "parser.mly"
    ( [_1; _3] )
# 1096 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 229 "parser.mly"
    ( _1 @ [addtyp _3] )
# 1104 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 231 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 1112 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
