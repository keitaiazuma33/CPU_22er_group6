type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | XOR
  | OR
  | AND
  | SLL
  | SRL
  | SQRT
  | FABS
  | MINUS
  | PLUS
  | AST
  | SLASH
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | FTOI
  | ITOF
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | INI
  | INF
  | OUTPUT
  | ITOIA
  | ITOFA
  | GETHP
  | SETHP
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parser�����Ѥ����ѿ����ؿ������ʤɤ���� *)
open Syntax
let addtyp x = (x, Type.gentyp ())
# 59 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* XOR *);
  262 (* OR *);
  263 (* AND *);
  264 (* SLL *);
  265 (* SRL *);
  266 (* SQRT *);
  267 (* FABS *);
  268 (* MINUS *);
  269 (* PLUS *);
  270 (* AST *);
  271 (* SLASH *);
  272 (* MINUS_DOT *);
  273 (* PLUS_DOT *);
  274 (* AST_DOT *);
  275 (* SLASH_DOT *);
  276 (* FTOI *);
  277 (* ITOF *);
  278 (* EQUAL *);
  279 (* LESS_GREATER *);
  280 (* LESS_EQUAL *);
  281 (* GREATER_EQUAL *);
  282 (* LESS *);
  283 (* GREATER *);
  284 (* IF *);
  285 (* THEN *);
  286 (* ELSE *);
  288 (* LET *);
  289 (* IN *);
  290 (* REC *);
  291 (* INI *);
  292 (* INF *);
  293 (* OUTPUT *);
  294 (* ITOIA *);
  295 (* ITOFA *);
  296 (* GETHP *);
  297 (* SETHP *);
  298 (* COMMA *);
  299 (* ARRAY_CREATE *);
  300 (* DOT *);
  301 (* LESS_MINUS *);
  302 (* SEMICOLON *);
  303 (* LPAREN *);
  304 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  287 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\007\000\007\000\004\000\004\000\
\005\000\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\006\000\002\000\003\000\003\000\003\000\003\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\006\000\005\000\002\000\001\000\008\000\007\000\
\003\000\003\000\001\000\004\000\002\000\001\000\002\000\001\000\
\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\051\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\010\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\015\000\017\000\016\000\018\000\019\000\
\000\000\000\000\013\000\014\000\000\000\000\000\030\000\031\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\000\000\000\000\060\000\059\000\000\000\000\000\007\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\026\000\027\000\079\000\073\000\028\000\081\000\112\000"

let yysindex = "\004\000\
\214\255\000\000\000\000\000\000\000\000\000\000\214\255\214\255\
\214\255\214\255\214\255\011\255\011\255\214\255\000\000\247\254\
\011\255\011\255\011\255\011\255\011\255\011\255\011\255\011\255\
\161\255\014\005\001\255\224\254\000\000\014\005\014\005\000\000\
\000\000\227\254\227\254\102\004\250\254\248\254\251\254\227\254\
\227\254\227\254\227\254\227\254\227\254\227\254\006\255\000\000\
\226\003\214\255\214\255\214\255\214\255\214\255\214\255\214\255\
\214\255\214\255\214\255\214\255\214\255\214\255\214\255\214\255\
\214\255\214\255\214\255\214\255\214\255\214\255\236\254\227\254\
\011\255\214\255\237\254\214\255\214\255\254\254\253\254\245\254\
\214\254\227\254\000\000\000\000\000\000\000\000\000\000\000\000\
\251\003\251\003\000\000\000\000\251\003\251\003\000\000\000\000\
\110\005\110\005\110\005\110\005\110\005\110\005\087\005\014\005\
\214\255\227\254\087\005\214\255\144\004\186\004\254\254\012\255\
\214\255\002\255\005\255\017\255\014\004\058\004\214\255\214\255\
\000\000\214\255\014\005\000\000\000\000\214\255\252\254\000\000\
\056\005\014\005\014\005\228\004\214\255\214\255\056\005\014\005"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\141\000\181\002\000\000\011\000\059\000\000\000\
\000\000\185\000\229\000\000\000\000\000\000\000\000\000\021\001\
\069\001\117\001\161\001\205\001\249\001\041\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\089\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\137\002\000\000\000\000\000\000\000\000\000\000\000\000\
\208\002\236\002\000\000\000\000\021\003\061\003\000\000\000\000\
\250\002\075\003\109\003\123\003\157\003\171\003\082\003\103\000\
\000\000\097\000\130\003\000\000\000\000\000\000\021\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\147\000\000\000\000\000\000\000\001\000\000\000\
\177\003\191\000\013\255\000\000\000\000\000\000\182\003\231\000"

let yygindex = "\000\000\
\010\000\087\000\000\000\000\000\000\000\000\000\189\255"

let yytablesize = 1665
let yytable = "\115\000\
\007\000\004\000\005\000\006\000\001\000\116\000\004\000\005\000\
\006\000\074\000\032\000\004\000\005\000\006\000\075\000\077\000\
\029\000\030\000\031\000\032\000\033\000\037\000\078\000\036\000\
\038\000\080\000\105\000\108\000\111\000\113\000\114\000\015\000\
\124\000\122\000\049\000\125\000\015\000\039\000\126\000\061\000\
\133\000\015\000\054\000\121\000\071\000\052\000\000\000\025\000\
\056\000\075\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\025\000\033\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\000\000\000\000\000\000\107\000\000\000\109\000\110\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\000\000\034\000\035\000\000\000\000\000\049\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\072\000\117\000\000\000\000\000\118\000\000\000\000\000\
\000\000\000\000\123\000\000\000\000\000\000\000\000\000\000\000\
\129\000\130\000\000\000\131\000\000\000\082\000\000\000\132\000\
\000\000\000\000\000\000\000\000\008\000\000\000\135\000\136\000\
\000\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\106\000\
\003\000\004\000\005\000\006\000\007\000\000\000\000\000\000\000\
\000\000\000\000\008\000\009\000\010\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\012\000\013\000\000\000\000\000\
\034\000\000\000\000\000\000\000\014\000\000\000\043\000\015\000\
\016\000\000\000\000\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\000\000\024\000\000\000\000\000\000\000\025\000\
\048\000\000\000\000\000\000\000\000\000\003\000\004\000\005\000\
\006\000\007\000\000\000\000\000\000\000\000\000\000\000\008\000\
\009\000\010\000\000\000\000\000\035\000\011\000\047\000\000\000\
\000\000\012\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\015\000\016\000\000\000\000\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\000\000\
\024\000\007\000\007\000\007\000\025\000\007\000\007\000\007\000\
\007\000\007\000\000\000\000\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\036\000\000\000\007\000\007\000\
\007\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\000\000\007\000\000\000\000\000\000\000\000\000\000\000\032\000\
\032\000\000\000\007\000\032\000\007\000\000\000\007\000\007\000\
\007\000\056\000\056\000\056\000\000\000\056\000\056\000\056\000\
\056\000\056\000\032\000\000\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\037\000\000\000\056\000\056\000\
\056\000\056\000\056\000\056\000\000\000\056\000\056\000\056\000\
\000\000\056\000\000\000\000\000\000\000\000\000\000\000\033\000\
\033\000\000\000\056\000\033\000\000\000\000\000\056\000\056\000\
\056\000\055\000\055\000\055\000\000\000\055\000\055\000\055\000\
\055\000\055\000\033\000\000\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\038\000\000\000\055\000\055\000\
\055\000\055\000\055\000\055\000\000\000\055\000\055\000\055\000\
\000\000\055\000\000\000\049\000\049\000\000\000\000\000\049\000\
\000\000\000\000\055\000\000\000\000\000\000\000\055\000\055\000\
\055\000\008\000\008\000\008\000\008\000\008\000\049\000\000\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\039\000\000\000\008\000\008\000\008\000\008\000\008\000\008\000\
\000\000\008\000\008\000\000\000\000\000\008\000\000\000\044\000\
\044\000\000\000\000\000\044\000\000\000\000\000\008\000\000\000\
\000\000\000\000\008\000\000\000\008\000\034\000\034\000\034\000\
\034\000\034\000\044\000\000\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\040\000\000\000\034\000\034\000\
\034\000\034\000\034\000\034\000\000\000\034\000\034\000\000\000\
\000\000\034\000\000\000\043\000\043\000\000\000\000\000\043\000\
\000\000\000\000\034\000\000\000\000\000\000\000\034\000\000\000\
\034\000\035\000\035\000\035\000\035\000\035\000\043\000\000\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\041\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
\000\000\035\000\035\000\047\000\047\000\035\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
\000\000\000\000\035\000\000\000\035\000\000\000\047\000\000\000\
\000\000\036\000\036\000\036\000\036\000\036\000\000\000\000\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\042\000\000\000\036\000\036\000\036\000\036\000\036\000\036\000\
\000\000\036\000\036\000\000\000\000\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000\000\
\000\000\000\000\036\000\000\000\036\000\000\000\000\000\000\000\
\000\000\037\000\037\000\037\000\037\000\037\000\000\000\000\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\045\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
\000\000\037\000\037\000\000\000\000\000\037\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\037\000\000\000\037\000\000\000\000\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\050\000\000\000\038\000\038\000\038\000\038\000\038\000\038\000\
\000\000\038\000\038\000\000\000\000\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\000\000\
\000\000\000\000\038\000\000\000\038\000\039\000\039\000\039\000\
\039\000\039\000\000\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\046\000\000\000\039\000\039\000\
\039\000\039\000\039\000\039\000\000\000\039\000\039\000\000\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\000\000\000\000\000\000\000\039\000\012\000\
\039\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\000\000\040\000\040\000\011\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\020\000\040\000\000\000\040\000\041\000\041\000\041\000\
\041\000\041\000\000\000\000\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\000\000\000\000\041\000\041\000\
\041\000\041\000\041\000\041\000\029\000\041\000\041\000\000\000\
\000\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\041\000\000\000\
\041\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\042\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\028\000\000\000\042\000\042\000\
\042\000\042\000\042\000\042\000\000\000\042\000\042\000\000\000\
\000\000\042\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\058\000\042\000\000\000\000\000\000\000\042\000\000\000\
\042\000\000\000\000\000\000\000\000\000\045\000\045\000\045\000\
\045\000\045\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\024\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\000\000\045\000\045\000\000\000\
\000\000\045\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\057\000\045\000\000\000\000\000\000\000\045\000\000\000\
\045\000\000\000\000\000\000\000\000\000\050\000\050\000\050\000\
\050\000\050\000\000\000\000\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\022\000\000\000\050\000\050\000\
\050\000\050\000\050\000\050\000\000\000\050\000\050\000\000\000\
\000\000\050\000\023\000\000\000\000\000\000\000\000\000\000\000\
\026\000\000\000\050\000\000\000\000\000\048\000\050\000\000\000\
\050\000\046\000\046\000\046\000\046\000\046\000\000\000\000\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\000\000\046\000\046\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\012\000\012\000\000\000\000\000\012\000\
\012\000\000\000\046\000\000\000\046\000\012\000\012\000\012\000\
\012\000\012\000\012\000\000\000\012\000\012\000\000\000\000\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\011\000\012\000\000\000\011\000\011\000\012\000\000\000\012\000\
\000\000\011\000\011\000\011\000\011\000\011\000\011\000\000\000\
\011\000\011\000\000\000\000\000\011\000\000\000\000\000\020\000\
\020\000\020\000\020\000\020\000\020\000\011\000\020\000\020\000\
\000\000\011\000\020\000\011\000\000\000\000\000\000\000\000\000\
\029\000\029\000\000\000\020\000\029\000\029\000\000\000\020\000\
\000\000\020\000\029\000\029\000\029\000\029\000\029\000\029\000\
\000\000\029\000\029\000\000\000\000\000\029\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\029\000\000\000\029\000\000\000\000\000\000\000\
\028\000\028\000\000\000\000\000\028\000\028\000\000\000\000\000\
\000\000\000\000\028\000\028\000\028\000\028\000\028\000\028\000\
\000\000\028\000\028\000\000\000\000\000\028\000\000\000\000\000\
\021\000\021\000\021\000\021\000\021\000\021\000\028\000\021\000\
\021\000\000\000\028\000\021\000\028\000\000\000\058\000\058\000\
\000\000\000\000\058\000\000\000\021\000\000\000\000\000\000\000\
\021\000\000\000\021\000\058\000\000\000\000\000\000\000\058\000\
\000\000\058\000\024\000\024\000\024\000\024\000\024\000\024\000\
\000\000\024\000\024\000\000\000\000\000\024\000\000\000\000\000\
\025\000\025\000\025\000\025\000\025\000\025\000\024\000\025\000\
\025\000\000\000\024\000\025\000\024\000\000\000\057\000\057\000\
\000\000\000\000\057\000\000\000\025\000\000\000\000\000\000\000\
\025\000\000\000\025\000\057\000\000\000\000\000\000\000\057\000\
\000\000\057\000\022\000\022\000\022\000\022\000\022\000\022\000\
\000\000\022\000\022\000\000\000\000\000\022\000\000\000\000\000\
\023\000\023\000\023\000\023\000\023\000\023\000\022\000\023\000\
\023\000\000\000\022\000\023\000\022\000\026\000\026\000\000\000\
\000\000\026\000\048\000\048\000\023\000\000\000\048\000\000\000\
\023\000\000\000\023\000\000\000\000\000\000\000\026\000\000\000\
\026\000\000\000\000\000\048\000\000\000\048\000\050\000\051\000\
\052\000\053\000\054\000\000\000\000\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\000\000\000\000\063\000\
\064\000\065\000\066\000\067\000\068\000\000\000\000\000\050\000\
\051\000\052\000\053\000\054\000\000\000\000\000\000\000\000\000\
\057\000\058\000\000\000\069\000\061\000\062\000\000\000\070\000\
\000\000\083\000\050\000\051\000\052\000\053\000\054\000\000\000\
\000\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\000\000\000\000\063\000\064\000\065\000\066\000\067\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\000\000\000\000\000\000\070\000\000\000\127\000\050\000\051\000\
\052\000\053\000\054\000\000\000\000\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\000\000\000\000\063\000\
\064\000\065\000\066\000\067\000\068\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\069\000\000\000\000\000\000\000\070\000\
\000\000\128\000\050\000\051\000\052\000\053\000\054\000\000\000\
\000\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\000\000\000\000\063\000\064\000\065\000\066\000\067\000\
\068\000\000\000\076\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\000\000\000\000\000\000\070\000\050\000\051\000\052\000\053\000\
\054\000\000\000\000\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\000\000\000\000\063\000\064\000\065\000\
\066\000\067\000\068\000\000\000\000\000\119\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\069\000\000\000\000\000\000\000\070\000\050\000\051\000\
\052\000\053\000\054\000\000\000\000\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\000\000\000\000\063\000\
\064\000\065\000\066\000\067\000\068\000\000\000\000\000\000\000\
\000\000\000\000\120\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\069\000\000\000\000\000\000\000\070\000\
\050\000\051\000\052\000\053\000\054\000\000\000\000\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\000\000\
\000\000\063\000\064\000\065\000\066\000\067\000\068\000\000\000\
\000\000\000\000\000\000\000\000\134\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\000\000\000\000\
\000\000\070\000\050\000\051\000\052\000\053\000\054\000\000\000\
\000\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\000\000\000\000\063\000\064\000\065\000\066\000\067\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\000\000\000\000\000\000\070\000\050\000\051\000\052\000\053\000\
\054\000\000\000\000\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\000\000\000\000\063\000\064\000\065\000\
\066\000\067\000\068\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\050\000\051\000\052\000\053\000\054\000\
\000\000\069\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\000\000\000\000\063\000\064\000\065\000\066\000\
\067\000\068\000\050\000\051\000\052\000\053\000\054\000\000\000\
\000\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000"

let yycheck = "\042\001\
\000\000\001\001\002\001\003\001\001\000\048\001\001\001\002\001\
\003\001\042\001\000\000\001\001\002\001\003\001\044\001\022\001\
\007\000\008\000\009\000\010\000\011\000\031\001\031\001\014\000\
\034\001\031\001\047\001\047\001\031\001\033\001\042\001\031\001\
\031\001\022\001\025\000\031\001\031\001\047\001\022\001\000\000\
\045\001\031\001\022\001\111\000\044\001\033\001\255\255\047\001\
\000\000\044\001\255\255\255\255\047\001\255\255\255\255\255\255\
\255\255\047\001\000\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\255\255\255\255\255\255\074\000\255\255\076\000\077\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\012\000\013\000\255\255\255\255\000\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\255\255\
\255\255\027\000\105\000\255\255\255\255\108\000\255\255\255\255\
\255\255\255\255\113\000\255\255\255\255\255\255\255\255\255\255\
\119\000\120\000\255\255\122\000\255\255\047\000\255\255\126\000\
\255\255\255\255\255\255\255\255\000\000\255\255\133\000\134\000\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\073\000\
\000\001\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\255\255\255\255\255\255\
\016\001\255\255\255\255\255\255\020\001\021\001\255\255\255\255\
\000\000\255\255\255\255\255\255\028\001\255\255\000\000\031\001\
\032\001\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\255\255\043\001\255\255\255\255\255\255\047\001\
\048\001\255\255\255\255\255\255\255\255\000\001\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\255\255\255\255\000\000\016\001\000\000\255\255\
\255\255\020\001\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\255\255\255\255\031\001\032\001\255\255\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\001\001\002\001\003\001\047\001\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\031\001\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\255\255\042\001\033\001\044\001\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\048\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\031\001\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\255\255\042\001\033\001\255\255\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\048\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\031\001\
\255\255\033\001\255\255\029\001\030\001\255\255\255\255\033\001\
\255\255\255\255\042\001\255\255\255\255\255\255\046\001\047\001\
\048\001\005\001\006\001\007\001\008\001\009\001\048\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\000\000\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\029\001\
\030\001\255\255\255\255\033\001\255\255\255\255\042\001\255\255\
\255\255\255\255\046\001\255\255\048\001\005\001\006\001\007\001\
\008\001\009\001\048\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\255\255\
\255\255\033\001\255\255\029\001\030\001\255\255\255\255\033\001\
\255\255\255\255\042\001\255\255\255\255\255\255\046\001\255\255\
\048\001\005\001\006\001\007\001\008\001\009\001\048\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\000\000\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\029\001\030\001\033\001\255\255\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\255\255\
\255\255\255\255\046\001\255\255\048\001\255\255\048\001\255\255\
\255\255\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\000\000\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\255\255\
\255\255\255\255\046\001\255\255\048\001\255\255\255\255\255\255\
\255\255\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\000\000\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\255\255\
\255\255\255\255\046\001\255\255\048\001\255\255\255\255\255\255\
\255\255\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\000\000\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\255\255\
\255\255\255\255\046\001\255\255\048\001\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\255\255\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\042\001\255\255\255\255\255\255\046\001\000\000\
\048\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\000\000\255\255\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\255\255\
\255\255\000\000\046\001\255\255\048\001\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\000\000\029\001\030\001\255\255\
\255\255\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\042\001\255\255\255\255\255\255\046\001\255\255\
\048\001\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\255\255\
\255\255\033\001\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\042\001\255\255\255\255\255\255\046\001\255\255\
\048\001\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\255\255\
\255\255\033\001\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\042\001\255\255\255\255\255\255\046\001\255\255\
\048\001\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\000\000\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\255\255\
\255\255\033\001\000\000\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\042\001\255\255\255\255\000\000\046\001\255\255\
\048\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\255\255\
\255\255\255\255\255\255\012\001\013\001\255\255\255\255\016\001\
\017\001\255\255\046\001\255\255\048\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\029\001\030\001\255\255\255\255\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\012\001\
\013\001\042\001\255\255\016\001\017\001\046\001\255\255\048\001\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\029\001\030\001\255\255\255\255\033\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\042\001\029\001\030\001\
\255\255\046\001\033\001\048\001\255\255\255\255\255\255\255\255\
\012\001\013\001\255\255\042\001\016\001\017\001\255\255\046\001\
\255\255\048\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\255\255\
\255\255\255\255\046\001\255\255\048\001\255\255\255\255\255\255\
\012\001\013\001\255\255\255\255\016\001\017\001\255\255\255\255\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\042\001\029\001\
\030\001\255\255\046\001\033\001\048\001\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\042\001\255\255\255\255\255\255\
\046\001\255\255\048\001\042\001\255\255\255\255\255\255\046\001\
\255\255\048\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\042\001\029\001\
\030\001\255\255\046\001\033\001\048\001\255\255\029\001\030\001\
\255\255\255\255\033\001\255\255\042\001\255\255\255\255\255\255\
\046\001\255\255\048\001\042\001\255\255\255\255\255\255\046\001\
\255\255\048\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\042\001\029\001\
\030\001\255\255\046\001\033\001\048\001\029\001\030\001\255\255\
\255\255\033\001\029\001\030\001\042\001\255\255\033\001\255\255\
\046\001\255\255\048\001\255\255\255\255\255\255\046\001\255\255\
\048\001\255\255\255\255\046\001\255\255\048\001\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\255\255\255\255\255\255\255\255\
\014\001\015\001\255\255\042\001\018\001\019\001\255\255\046\001\
\255\255\048\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\001\
\255\255\255\255\255\255\046\001\255\255\048\001\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\255\255\255\255\046\001\
\255\255\048\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\001\
\255\255\255\255\255\255\046\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\255\255\255\255\046\001\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\255\255\255\255\046\001\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\255\255\255\255\
\255\255\046\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\001\
\255\255\255\255\255\255\046\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\005\001\006\001\007\001\008\001\009\001\
\255\255\042\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001"

let yynames_const = "\
  NOT\000\
  XOR\000\
  OR\000\
  AND\000\
  SLL\000\
  SRL\000\
  SQRT\000\
  FABS\000\
  MINUS\000\
  PLUS\000\
  AST\000\
  SLASH\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  FTOI\000\
  ITOF\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  INI\000\
  INF\000\
  OUTPUT\000\
  ITOIA\000\
  ITOFA\000\
  GETHP\000\
  SETHP\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 81 "parser.mly"
    ( _2 )
# 683 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
    ( Unit )
# 689 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 85 "parser.mly"
    ( Bool(_1) )
# 696 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 87 "parser.mly"
    ( Int(_1) )
# 703 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 89 "parser.mly"
    ( Float(_1) )
# 710 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 91 "parser.mly"
    ( Var(_1, (Parsing.symbol_start_pos ()).pos_lnum) )
# 717 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 93 "parser.mly"
    ( Get(_1, _4, (Parsing.symbol_start_pos ()).pos_lnum) )
# 725 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 97 "parser.mly"
    ( _1 )
# 732 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
    ( Not(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 739 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 103 "parser.mly"
    ( match _2 with
    | Float(f) -> Float(-.f) (* -1.23�ʤɤϷ����顼�ǤϤʤ��Τ��̰��� *)
    | e -> Neg(e, (Parsing.symbol_start_pos ()).pos_lnum) )
# 748 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 107 "parser.mly"
    ( Add(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 756 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 109 "parser.mly"
    ( Sub(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 764 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 111 "parser.mly"
    ( Mul(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 772 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 113 "parser.mly"
    ( Div(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 780 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 115 "parser.mly"
    ( Xor(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 788 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 117 "parser.mly"
    ( And(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 796 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 119 "parser.mly"
    ( Or(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 804 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 121 "parser.mly"
    ( SLL(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 812 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 123 "parser.mly"
    ( SRL(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 820 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 125 "parser.mly"
    ( Eq(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 828 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 127 "parser.mly"
    ( Not(Eq(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) (* some float comparisons differ from OCaml for NaN; see: https://github.com/esumii/min-caml/issues/13#issuecomment-1147032750 *) )
# 836 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 129 "parser.mly"
    ( Not(LE(_3, _1, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) )
# 844 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 131 "parser.mly"
    ( Not(LE(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum), (Parsing.symbol_start_pos ()).pos_lnum) )
# 852 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 133 "parser.mly"
    ( LE(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 860 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 135 "parser.mly"
    ( LE(_3, _1, (Parsing.symbol_start_pos ()).pos_lnum) )
# 868 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 138 "parser.mly"
    ( If(_2, _4, _6, (Parsing.symbol_start_pos ()).pos_lnum) )
# 877 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 141 "parser.mly"
    ( FNeg(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 884 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 143 "parser.mly"
    ( FAdd(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 892 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 145 "parser.mly"
    ( FSub(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 900 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 147 "parser.mly"
    ( FMul(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 908 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 149 "parser.mly"
    ( FDiv(_1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 916 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 151 "parser.mly"
    ( Sqrt(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 923 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 153 "parser.mly"
    ( FAbs(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 930 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 156 "parser.mly"
    ( FtoI(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 937 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 159 "parser.mly"
    ( ItoF(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 944 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 162 "parser.mly"
    ( Ini(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 951 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 165 "parser.mly"
    ( Inf(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 958 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 168 "parser.mly"
    ( Out(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 965 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 171 "parser.mly"
    ( ItoIA(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 972 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 174 "parser.mly"
    ( ItoFA(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 979 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 177 "parser.mly"
    ( Gethp(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 986 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 180 "parser.mly"
    ( Sethp(_2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 993 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 183 "parser.mly"
    ( Let(addtyp _2, _4, _6, (Parsing.symbol_start_pos ()).pos_lnum) )
# 1002 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 186 "parser.mly"
    ( LetRec(_3, _5, (Parsing.symbol_start_pos ()).pos_lnum) )
# 1010 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 189 "parser.mly"
    ( App(_1, _2, (Parsing.symbol_start_pos ()).pos_lnum) )
# 1018 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 192 "parser.mly"
    ( Tuple(_1, (Parsing.symbol_start_pos ()).pos_lnum) )
# 1025 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 194 "parser.mly"
    ( LetTuple(_3, _6, _8, (Parsing.symbol_start_pos ()).pos_lnum) )
# 1034 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 196 "parser.mly"
    ( Put(_1, _4, _7, (Parsing.symbol_start_pos ()).pos_lnum) )
# 1043 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 198 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 1051 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 201 "parser.mly"
    ( Array(_2, _3, (Parsing.symbol_start_pos ()).pos_lnum) )
# 1059 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 203 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near line %d"
           (Parsing.symbol_start_pos ()).pos_lnum) )
# 1067 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 209 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 1076 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 213 "parser.mly"
    ( addtyp _1 :: _2 )
# 1084 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 215 "parser.mly"
    ( [addtyp _1] )
# 1091 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 220 "parser.mly"
    ( _1 @ [_2] )
# 1099 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 223 "parser.mly"
    ( [_1] )
# 1106 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 227 "parser.mly"
    ( _1 @ [_3] )
# 1114 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 229 "parser.mly"
    ( [_1; _3] )
# 1122 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 233 "parser.mly"
    ( _1 @ [addtyp _3] )
# 1130 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 235 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 1138 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
